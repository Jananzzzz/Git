this is a doc of git features and notes.

when creating a repository in github, then you need to create a local repository to connect it.
here are the following steps you need to do in local: (after creating a repository in github)
1. create a local repository folder:
    a. in the windows command line, type:
    echo >> README.md  // this is windows instruction to create a new file in command line.
    b. then you will be asked to fill something in the file you created, just hit "Enter"
    c. if you don't want to add a README file, you can skip this step.
2. git branch -M main // you create a the first branch in you local repository.
3. git remote add origin https://github.com/Jananzzzz/Git.git  // connect your local repository to remote github repository
4. git remote // check the remote repository status, in this case it will show origin, which means the remote repository is on its origin branch,
   then, we will push the local repository to remote, this will break the origin status in the remote.
5. git add .
6. git commit -m "first commit"
7. git push -u origin main // push the local main branch to the remote origin branch, now the remote is on the main branch, which is also the origin branch.



Create a new branch:             git branch New_Branch_Name
Show all the branches:            git branch
Switch to a branch:              git checkout Branch_Name
After you create and Switch to a new branch, you should set the origin of the new branch in remote, then you can push changes to this new branch
the set origin command is:         git push --set-upstream origin FirstTestBranch          

your local changes will be overwritten by checkout, please commit your changes or stash them before you switch branches

abort git merge when conflicts:        git merge --abort
always work on the side branch instead of main branch
always commit after changes

abort change to current code:                  git stash                //roll back to last modified or commit or merge

git status:          show the current status: add/modified/delete  
[master +1 +1 -1]  means there is an add file, an modified file and a deleted file to be committed 
the ! is files conflicted
numbers behind a ! means that the status is not added/updated          

Using git pull and git push, and try to pull request as a repository owner or maintainer:
1. create a local repository
2. git pull from the remote repository
3. git remote add origin the remote repository
4. you can change the files as you like
5. git push it to the remote repository
6. the remote repository maintainer will recieve a pull request 
7. you as the maintainer can approve it and merge the third-party modified version to the remote origin version
8. after the merge, you can delete the third-party branch as a maintainer
9. the git pull, modify, git push, pull request, merge procedure finished.

after you pull from remote repository, you don't need to git commit and push it to keep the head of the branch. 
after the git pull operation, you are already updated and is the head now.
also, after you git merge successfully, you still not need to git add . and git commit.

git clone command can be used directly; not in a git repository
when you git clone a repo, you actually set it as your origin remote.

the core difference between git clone and git fork is: the operation permission
git clone is used when you are a owner or member of the repository, you can clone it and modify it then push to it (providing passwords or ssh key, etc)

git fork is to fork a same repository in your own github account, then you can modify or git clone the repo as you like
if you want to push the modification you made to the origin repository which you are not a member of, you can send a pull request at your fork-repository page
then the origin repository maintainer will recieve a notification that someone(you) send a pull request.
if the maintainer accept the request, he then can merge your modified-version to his origin version.

you can git pull and git clone from any repo, but you need authoration to git push to it.
the subtle difference between git pull and git clone is:
if you not have a local repo, you can directly clone one
if you already have a repo, which is a diferent version of the repo you want to pull, you can git pull it.
if you have an empty repo, then git clone and git pull almost have no diference. (except that git clone is using without a git repository)

there are two ways you can git push to a repo which you are not the owner:
a. although you are not an owner, you are a maintainer
b. fork it and send pull request to the maintainer